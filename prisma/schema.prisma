generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]

}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Trip {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  days        Int        @db.SmallInt
  budget      Float
  fromPlace   String
  toPlace     String
  type        TripType
  with        String     @default("solo")
  slug        String     @unique
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyPlans  DailyPlan[]
}

model DailyPlan {
  id          String       @id @default(cuid())
  dayNumber   Int          @db.SmallInt
  places      Place[]
  restaurants Restaurant[]
  activities  Activity[]
  tripId      String
  trip        Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, dayNumber])
}

model Place {
  id          String    @id @default(cuid())
  name        String
  description String
  latitude    Float
  longitude   Float
  dailyPlanId String
  dailyPlan   DailyPlan @relation(fields: [dailyPlanId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id          String    @id @default(cuid())
  name        String
  description String
  latitude    Float
  longitude   Float
  dailyPlanId String
  dailyPlan   DailyPlan @relation(fields: [dailyPlanId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String    @id @default(cuid())
  name        String
  description String
  latitude    Float
  longitude   Float
  dailyPlanId String
  dailyPlan   DailyPlan @relation(fields: [dailyPlanId], references: [id], onDelete: Cascade)
}

enum TripType {
  BUDGET
  MODERATE
  LUXURY
}